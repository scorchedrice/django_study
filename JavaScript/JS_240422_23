# Event
- event가 발생했을때(클릭, 입력 ...) 어떤 동작을 할까?
```js
// example
// 1. 버튼을 선택
const btn = document.querySelector('#btn')
// 2. 콜백 함수 (이벤트 발생 시 실행할 함수)
const detectClick = function (event) {
    console.log('click!!')
}
// 3. 이벤트 핸들러 활용
btn.addEventListener('click',detectClick)
// - btn에 이벤트가 발생하면 detectClick을 실행할거야
//  - 그 이벤트는 클릭이야
```

## 버블링 (중첩된 구조, 포함관계)
- 중첩된 구조에 이벤트 핸들러가 있을 때, 어떻게 동작할까?
    - 한 요소에 이벤트가 발생하면, 이 요소에 할당된 핸들러가 작동하고 부모 요소의 핸들러가 동작한다.
      - 이 과정은 `document`를 만날 때까지 과정이 반복되고 각각에 할당된 핸들러가 동작
- 공통조상에 이벤트 핸들러를 할당해 여러가지 요소를 한번에 다룰 수 있기에 중요함.

### currentTarget vs. target
- 이벤트가 정확히 어디에서 동작했나 확인 가능.
    - `click`인 경우 발생하는 이벤트가 있다고 가정
      - 직접적으로 `click` (target, 이벤트 시발점, 버블링이 진행되어도 불변) : .target
      - 현재 이벤트가 일어난 대상 (this, 현재) : .currentTarget
        - 둘이 동일할 수, 다를 수 있다.
- `Bubbling.html`참고

## 캡처링 (버블링과 반대의 작동)
- 버블링의 중요성이 상대적으로 더 크니, 이후 학습

## 이벤트의 기본 동작 취소 (.preventDefault())
- HTML의 각 요소가 기본으로 가진 이벤트를 취소할 필요성이 있을 때 활용 (복사 제한, 새로고침 취소 ...)

## .addEventListener에서의 화살표 함수 사용 가능?
- 가능하지만, 화살표 함수는 자신만의 `this`를 가지지 않는다. 따라서 `this`를 사용 해야하는 경우, 일반 함수를 활용해야한다.


----------------------


# 동기와 비동기
## 동기 (Synchronous)
- 프로그램 실행 흐름이 순차적으로 진행
  - 하나의 작업이 완료되어야 다음 작업이 실행된다.

## 비동기 (Asynchronous)
- 프로그램의 실행이 순차적이지 않으며, 작업이 완료되기를 기다리지 않고 다음 작업 진행
  - 즉, 동시에 다른 작업들을 수행할 수 있다.

### Single Thread 언어인 JavaScript, 비동기 처리 방식
- JavaScript가 동작할 수 있는 환경 (Runtime) 활용
  - 브라우저 또는 Node와 같은 환경에서 처리 (이들의 도움을 받음)
    - JavaScript Engine의 CallStack - Web API - TaskQueue - Event Loop
#### 처리과정 Example
```js
console.log('Hi')

setTimeout(function myFunc() {
    console.log('Work')
}, 3000)

console.log('Bye')
```
- 동기처리의 경우엔 Hi-Work-Bye 이겠지만, 비동기처리의 경우엔 다음의 과정을 거친다.
1. 모든 작업은 Call Stack(LIFO)에서 처리된다.
2. 단, 오래걸리는 작업의 경우엔 Web API로 보내 별도 처리한다.
3. Web API에서 처리가 끝난 작업들은 Task Queue(FIFO)에 순차적으로 들어간다.
4. Event Loop가 Call Stack이 비어있는지 확인하고, 비어있다면 Task Queue에 있는 가장 오래된(가장 먼저 처리되어 들어온) 작업을 Call Stack으로 보낸다.

- Hi => Work를 Web API - Task Queue - Event Loop 과정으로 보낸다 => Bye => Work

# Ajax (Asynchronous JavaScript and XML)
- XMLHttpRequest 기술을 사용해 복잡하고 동적인 웹 페이지를 구성하는 프로그래밍 방식
- 비동기적인 웹 어플리케이션 개발을 위한 기술
- 페이지를 새로고침하지 않아도 동적으로 데이터를 불러와 화면을 갱신할 수 있다.
  - 전체가 다시 로드되지 않고 HTML 페이지 일부 DOM만 업데이트
  - 웹페이지 일부가 다시 로드되는 동안에도 코드가 계속 실행되어 비동기적 작업수행 가능

## XMLHttpRequest (XHR)
- 서버와 상호작용할 때 사용하는 객체로, 페이지의 새로고침 없이 데이터를 가져올 수 있다.
- 사용자의 작업을 방해하지 않고 페이지 일부를 업데이트할 수 있다.
- XML 외 모든 종류의 데이터 가져올 수 있다.

### XHR이 무엇이 다른가
- 기존 : 클라이언트가 form을 채우고 서버로 제출, 서버측은 요청 데이터를 처리 후 새로운 웹페이지를 응답으로 전달
  - 계속 새로고침 발생, 대역폭 낭비
- XHR : 필요한 부분에 대한 데이터만 처리 후 응답 (JSON 등의 데이터 타입)
  - 새로고침 횟수 대폭 감소, 클라이언트 쪽에서 작업이 진행되기에 처리량 감소

# Axios
- JavaScript에서 사용되는 Promise 기반 HTTP 클라이언트 라이브러리
- 브라우저를 위한 XHR 객체를 생성한다.
- 간편한 API를 제공하며, Promise 기반의 비동기 요청을 처리한다.
  - 주로 웹 애플리케이션에서 서버와 통신할 때 사용한다.
- 별개의 설치과정이 필요하며, CDN 방식으로 설치 가능하다.

## Axios 작동 원리
1. Axios를 활용해 XML 객체 생성 및 요청
2. Ajax 요청 처리 및 응답 데이터 생성 => JSON 전달
3. Axios가 Promise 객체로 응답 데이터 제공 => DOM 조작

## Axios 구조
- 서버로 부터 전달받은 데이터 가공한 promise 객체, 이 객체를 then과 catch 메서드를 활용해 필요한 로직을 수행할 수 있다.
  - then(callback) : 성공하면 수행할 로직 작성
  - catch(callback) : 실패하면 수행할 로직 작성
    - callback 위치에 화살표함수 활용 가능
    - 더불어 Promise를 활용해 비동기 콜백을 구현 가능하다
      - 비동기 콜백 : 과정1 끝나고 2, 2끝나고 3 ,,, 이와 같이 작업을 완료하도록 콜백함수를 활용하는 것 (일반적인 방법보다 가독성이 높으며 에러처리/코드관리 등 유연)
        ```js
        axios({})
            .then(1번)
            .then(2번)
            .then(3번)
            ...
            .catch(실패한다면 실행할 함수)
        ```

